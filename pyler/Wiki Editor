#!/usr/bin/python3.12
# -*- coding: utf-8 -*-
#pylint: disable=C0413, W0221, C0209, C0103
"""Wiki Editor özgür bir yazılımdır, onu Özgür Yazılım
Vakfı'nın yayınladığı GNU Genel Kamu Lisansı'nın 2.
sürümü veya (tercihinize bağlı) daha sonraki sürümleri
altında dağıtabilir ve/veya değiştirebilirsiniz.

Wiki Editor  faydalı olacağı umut edilerek dağıtılmaktadır,
fakat HİÇBİR GARANTİSİ YOKTUR; hatta ÜRÜN DEĞERİ
ya da BİR AMACA UYGUNLUK gibi garantiler de
vermez. Lütfen GNU Genel Kamu Lisansı'nı daha fazla
ayrıntı için inceleyin."""
import os
import sys
import importlib
import gi

gi.require_version('Adw', '1')

from gi.repository import  Adw
from gi.repository import GLib
from gi.repository import Gio

import notebook
import araclar
import file_operations
import menu_items
import wikitext

from open_directory import OpenDirectory

## dependency --> sudo apt-get install gir1.2-gtksource-5
#from gi.repository import Gtk as gtk


class WikiEditor3(Adw.Application):
    """
    Wiki Editor Application call
    """
    initial = None
    win = None
    def __init__(self, **kwargs):
        """
        initiate new gtk application
        """
        super().__init__(**kwargs)

        self.add_option("categories", "print categories and exit")
        self.add_option("licence", "print licence and exit")
        self.add_option("shortcuts", "print shortctus and exit")

        self.style_manager = self.get_style_manager()
        self.connect('activate', self.on_activate)

    def add_option(self, option, desc):
        """
        add an option to command line
        ...
        """
        self.add_main_option(
            option,
            ord( option[0].lower() ),
            GLib.OptionFlags.NONE,
            GLib.OptionArg.NONE,
            desc,
            None,
        )

    def on_activate(self, app):
        """call or reload new window
        on activate"""

        if self.initial is None:
            self.win = notebook.WikiEditor(app)

            self.win.props.default_height = 700
            self.win.props.default_width = 800

            self.initial = True
            self.win.present()
            return False

        importlib.reload(notebook)
        importlib.reload(araclar)
        importlib.reload(wikitext)
        importlib.reload(file_operations)
        importlib.reload(menu_items)

        self.win = notebook.WikiEditor(app)

        self.win.props.default_height = 700
        self.win.props.default_width = 800
        self.win.set_destroy_with_parent(False)

        self.win.present()
        return True

    def do_command_line(self, command_line):
        """
        open and handle command line options
        """
        self.activate()

        options = command_line.get_options_dict()
        options= options.end().unpack()

        for option in options:
            match option:
                case "licence":
                    print(__doc__, "\n")
                #    options[option] = False
                case "categories":
                    for key, val in araclar.CATEG.items():
                        print(key.upper(),"\n\t", "\n\t ".join(val), end="\n\n")
                case "shortcuts":
                    for each in self.win.list_actions():
                        action = self.get_accels_for_action(f"win.{each}")
                        if not action:
                            continue
                        print(r"{:<25} {:<25}".format( each.replace("_"," "), *action), end="\n\n")

        if True in options.values():
            sys.exit(0)

        files = command_line.get_arguments()

     #remove duplicates if any..
        files = list(dict.fromkeys(files[1:]))

        if len(files) == 1 and os.path.isdir(files[0]):
            open_dir = OpenDirectory(None, None, self.win)
            open_dir.create_list_view( files[0] )
            self.win.operations.yeni(False)
            return False

        if len(files) > 0:
            for dosya in files:
                self.win.operations.yeni(dosya)
                self.win.operations.open(dosya)

            return False

        self.win.operations.yeni(False)
        return True

if __name__ == "__main__":
    application = WikiEditor3(  application_id="Wiki-Editor",
        flags=Gio.ApplicationFlags.HANDLES_COMMAND_LINE)
    application.run(sys.argv)
